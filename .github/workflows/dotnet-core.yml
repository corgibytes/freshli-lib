name: .NET Core

on:
  push:
    branches: [ main, release* ]
    tags: 'v*'
  pull_request:
    branches: [ main, release* ]

jobs:
  auto-format:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.101

      - name: Install dotnet tools
        run: dotnet tool restore

      - name: Linting Auto-Formatting
        run: dotnet format -v diag

      - uses: stefanzweifel/git-auto-commit-action@v4
        name: Commit Auto-Format Changes
        with:
          commit_message: Committing auto-formatted code changes.

  build-matrix:
    needs: auto-format
    strategy:
      fail-fast: false
      matrix:
        # we have some tests that only run on certain platforms
        config:
          - os: ubuntu-latest
          - os: macos-latest
          - os: windows-latest

    runs-on: ${{ matrix.config.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0 # Required for GitVersion

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1.8.0
        with:
          dotnet-version: 5.0.101

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.10
        with:
          versionSpec: '5.6.6'

      - name: Show GitVersion Config
        uses: gittools/actions/gitversion/execute@v0.9.10
        with:
          useConfigFile: true
          additionalArguments: '/showConfig'

      - name: Determine Version and Update csproj Files
        uses: gittools/actions/gitversion/execute@v0.9.10
        with:
          useConfigFile: true
          additionalArguments: '/updateprojectfiles'

      - name: Display updated csproj File
        run: cat Corgibytes.Freshli.Lib/Corgibytes.Freshli.Lib.csproj

      - name: Build
        run: dotnet build --configuration Release

      - name: Run Tests
        run: dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=lcov /p:CoverletOutput="${{github.workspace}}/coverage-${{ matrix.config.os }}.info"

      - name: Format Coverage File For Upload
        uses: aktions/codeclimate-test-reporter@v1
        with:
          codeclimate-test-reporter-id: ${{ secrets.TEST_REPORTER_ID }}
          command: format-coverage -t lcov -o ${{github.workspace}}/codeclimate-${{ matrix.config.os }}.json ${{github.workspace}}/coverage-${{ matrix.config.os }}.info

      - name: Upload Coverage Files
        uses: actions/upload-artifact@v2
        with:
          name: "coverage-${{ matrix.config.os }}"
          path: "${{github.workspace}}/codeclimate-${{ matrix.config.os }}.json"

  build:
    needs: build-matrix
    runs-on: ubuntu-20.04
    steps:
      - name: Download Coverage Files
        uses: actions/download-artifact@v2
        with:
          path: "${{github.workspace}}/coverage"

      - name: Alert CodeClimate to Expect an Upload
        uses: aktions/codeclimate-test-reporter@v1
        with:
          codeclimate-test-reporter-id: ${{ secrets.TEST_REPORTER_ID }}
          command: before-build

      - name: Combine Code Coverage Results
        uses: aktions/codeclimate-test-reporter@v1
        with:
          codeclimate-test-reporter-id: ${{ secrets.TEST_REPORTER_ID }}
          command: sum-coverage --parts 3 --output ${{github.workspace}}/coverage/codeclimate.json ${{github.workspace}}/coverage/**/*.json

      - name: Upload Coverage Results to Code Climate
        uses: aktions/codeclimate-test-reporter@v1
        with:
          codeclimate-test-reporter-id: ${{ secrets.TEST_REPORTER_ID }}
          command: upload-coverage --input ${{github.workspace}}/coverage/codeclimate.json

      - name: Inform Code Climate that Upload is Complete
        uses: aktions/codeclimate-test-reporter@v1
        with:
          codeclimate-test-reporter-id: ${{ secrets.TEST_REPORTER_ID }}
          command: after-build

  publish:
    # TODO: Many of these steps are copy and pasted from build-matrix job above. We should explore a way to only specify this stuff once.
    needs: build-matrix
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0 # Required for GitVersion

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1.8.0
        with:
          dotnet-version: 5.0.101

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.10
        with:
          versionSpec: '5.6.6'

      - name: Show GitVersion Config
        uses: gittools/actions/gitversion/execute@v0.9.10
        with:
          useConfigFile: true
          additionalArguments: '/showConfig'

      - name: Determine Version and Update csproj Files
        uses: gittools/actions/gitversion/execute@v0.9.10
        with:
          useConfigFile: true
          additionalArguments: '/updateprojectfiles'

      - name: Display updated csproj File
        run: cat Corgibytes.Freshli.Lib/Corgibytes.Freshli.Lib.csproj

      - name: Build
        run: dotnet build --configuration Release

      - name: Package
        run: dotnet pack -c Release

      - name: Publish Alpha Package to Github Packages
        if: github.event_name == 'push'
        run: dotnet nuget push ./Corgibytes.Freshli.Lib/bin/Release/*.nupkg -k ${{ secrets.GITHUB_TOKEN }} --skip-duplicate -n true -s https://nuget.pkg.github.com/corgibytes/index.json

      - name: Publish Beta/Production Package to NuGet
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: dotnet nuget push ./Corgibytes.Freshli.Lib/bin/Release/*.nupkg -k ${{ secrets.NUGET_API_KEY }} --skip-duplicate -n true -s https://api.nuget.org/v3/index.json
